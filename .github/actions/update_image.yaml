name: 'Reusable: Update image in repository'

# This is a reusable build step, that is supposed to handle the generic task of building a docker
# image and pushing it to a repo.
# This action should be as generic as possible. Maybe extract it to a repo
#
# TODO: Could be made more customizable with: `jq`, `fromJSON`, `toJSON` and `join`

on:
  workflow_call:
    inputs:
      repository:
        description: 'Git repository to update'
        type: string
        required: true
      repository_username:
        description: 'Username for repository login'
        required: false
        default: 'git'
      file:
        description: 'File in the repo to update'
        type: string
        required: true
      json:
        description: 'Image tag to update the image to'
        type: string
        required: true
      image_ref:
        description: 'Name of the image to update'
        type: string
        required: false
        default: rails

    secrets:
      REPOSITORY_TOKEN:
        description: 'Token for repository login'
        required: true

jobs:
  write_tag:
    environment: deploy
    runs-on: 'ubuntu-latest'
    steps:
      - name: Pull from repository
        env:
          REPO_URL: ${{ inputs.repository }}
          REPO_USER: ${{ inputs.repository_username }}
          REPO_TOKEN: ${{ secrets.REPOSITORY_TOKEN }}
        run: |
          git clone https://${REPO_USER}:${REPO_TOKEN}@${REPO_URL} ./management_repo
          cd ./management_repo
          git config user.name "Decidim Github Action Image updater"
          git config user.email "robot@puzzle.ch"
          git remote set-url origin "https://${REPO_USER}:${REPO_TOKEN}@${REPO_URL}"
      - name: Update image tag
        uses: mikefarah/yq@master
        env:
          FILE: ${{ inputs.file }}
          IMAGE_REF: ${{ inputs.image_ref }}
          JSON: ${{ inputs.json }}
        with:
          cmd: |
            TAG=$(echo "${JSON}" | yq -r '.tags[] | select(. | test("sha-"))')
            echo $TAG
            yq -i '.images.[] | select(.name == env(IMAGE_REF)) += {"newTag": env(TAG)}' "${FILE}"
      - name: Commit & push back to repository
        env:
          IMAGE_REF: ${{ inputs.image_ref }}
          TAG: ${{ inputs.tag }}
        run: |
          git add .
          git commit -m "Setting image reference of '${IMAGE_REF} to '${TAG}'"
          git push origin master

